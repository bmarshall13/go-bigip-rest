/* 
 * BigIP iControl REST
 *
 * REST API for F5 BigIP. Only LTM is included, and most endpoints are untested.
 *
 * OpenAPI spec version: 12.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package f5api

type ProfileHttpEnforcement struct {

	// Specifies whether to allow, reject or switch to pass-through mode when an unknown HTTP method is parsed.
	UnknownMethod string `json:"unknownMethod,omitempty"`

	// Specifies the behavior when too many client headers are received. If enabled, will switch to pass through mode instead of rejecting the connection.
	ExcessClientHeaders string `json:"excessClientHeaders,omitempty"`

	// Kind of entity
	Kind string `json:"kind,omitempty"`

	// Specifies the behavior when too-large server headers are received. If enabled, will switch to pass through mode instead of rejecting the connection.
	OversizeServerHeaders string `json:"oversizeServerHeaders,omitempty"`

	// Specifies the behavior when too many server headers are received. If enabled, will switch to pass through mode instead of rejecting the connection.
	ExcessServerHeaders string `json:"excessServerHeaders,omitempty"`

	// Specifies the behavior when too-large client headers are received. If enabled, will switch to pass through mode instead of rejecting the connection.
	OversizeClientHeaders string `json:"oversizeClientHeaders,omitempty"`

	// Specifies the number of requests that the system accepts on a per-connection basis. The default value is 0 (zero), which means the system does not limit the number of requests per connection.
	MaxRequests int64 `json:"maxRequests,omitempty"`

	// Enables HTTP/1.1 pipelining. This allows clients to make requests even when prior requests have not received a response. In order for this to succeed, however, destination servers must include support for pipelining. If set to pass-through, pipelined data will cause the BigIP to immediately switch to pass-through mode and disable the HTTP filter.
	Pipeline string `json:"pipeline,omitempty"`

	// Specifies what happens if a truncated redirect is seen from a server. If enabled, the redirect will be forwarded to the client, otherwise the malformed HTTP will be silently ignored.
	TruncatedRedirects string `json:"truncatedRedirects,omitempty"`

	// Specifies which HTTP methods count as being known.  Removing RFC-defined methods from this list will cause the HTTP filter to not recognize them.
	KnownMethods string `json:"knownMethods,omitempty"`

	// Specifies the maximum header size.
	MaxHeaderSize int64 `json:"maxHeaderSize,omitempty"`

	// Specifies the maximum number of headers allowed in HTTP request/response. The default is 64 headers.
	MaxHeaderCount int64 `json:"maxHeaderCount,omitempty"`

	// Name of entity
	Name string `json:"name,omitempty"`
}
