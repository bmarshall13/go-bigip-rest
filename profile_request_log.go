/* 
 * BigIP iControl REST
 *
 * REST API for F5 BigIP. Only LTM is included, and most endpoints are untested.
 *
 * OpenAPI spec version: 12.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package f5api

type ProfileRequestLog struct {

	// The application service to which the object belongs.
	AppService string `json:"appService,omitempty"`

	// HighSpeedLogging protocol to use when logging.
	ResponseLogErrorProtocol string `json:"responseLogErrorProtocol,omitempty"`

	// Enables secondary logging should the primary lack sufficient available bandwidth.  This mechanism is best used to send an alert to a completely separate destination.
	LogRequestLoggingErrors string `json:"logRequestLoggingErrors,omitempty"`

	// The template to use when generating log messages. Shell style escapes (eg $foo and/or ${foo}) are used to import transaction-specific values.
	RequestLogTemplate string `json:"requestLogTemplate,omitempty"`

	// Name of the pool from which to select log servers.
	RequestLogErrorPool string `json:"requestLogErrorPool,omitempty"`

	// Name of the pool from which to select log servers.
	ResponseLogPool string `json:"responseLogPool,omitempty"`

	// Response logging may be overridden via iRule. This field determines the default response action.
	LogResponseByDefault string `json:"logResponseByDefault,omitempty"`

	// The template to use when generating log messages. Shell style escapes (eg $foo and/or ${foo}) are used to import transaction-specific values.
	ResponseLogTemplate string `json:"responseLogTemplate,omitempty"`

	// If enabled, the logging profile will close the connection after sending its proxy-response.
	ProxyCloseOnError string `json:"proxyCloseOnError,omitempty"`

	// HighSpeedLogging protocol to use when logging.
	RequestLogProtocol string `json:"requestLogProtocol,omitempty"`

	// Enables secondary logging should the primary lack sufficient available bandwidth.  This mechanism is best used to send an alert to a completely separate destination.
	LogResponseLoggingErrors string `json:"logResponseLoggingErrors,omitempty"`

	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom string `json:"defaultsFrom,omitempty"`

	// The template to use when generating log messages. Shell style escapes (eg $foo and/or ${foo}) are used to import transaction-specific values.
	ResponseLogErrorTemplate string `json:"responseLogErrorTemplate,omitempty"`

	// User defined description.
	Description string `json:"description,omitempty"`

	// Kind of entity
	Kind string `json:"kind,omitempty"`

	// Name of the pool from which to select log servers.
	ResponseLogErrorPool string `json:"responseLogErrorPool,omitempty"`

	// Should the logging fail, this feature allows the logging profile to respond directly, eg with an HTTP 502.
	ProxyRespondOnLoggingError string `json:"proxyRespondOnLoggingError,omitempty"`

	// Name of the pool from which to select log servers.
	RequestLogPool string `json:"requestLogPool,omitempty"`

	// The template to use when generating log messages. Shell style escapes (eg $foo and/or ${foo}) are used to import transaction-specific values.
	RequestLogErrorTemplate string `json:"requestLogErrorTemplate,omitempty"`

	// Displays the administrative partition within which this profile resides.
	Partition string `json:"partition,omitempty"`

	// Name of entity
	Name string `json:"name,omitempty"`

	// The response to send on logging errors.
	ProxyResponse string `json:"proxyResponse,omitempty"`

	// Enables or disables logging before the request is proxied.
	RequestLogging string `json:"requestLogging,omitempty"`

	// HighSpeedLogging protocol to use when logging.
	ResponseLogProtocol string `json:"responseLogProtocol,omitempty"`

	// HighSpeedLogging protocol to use when logging.
	RequestLogErrorProtocol string `json:"requestLogErrorProtocol,omitempty"`

	// Enables or disables logging before the response is returned to the client.
	ResponseLogging string `json:"responseLogging,omitempty"`
}
