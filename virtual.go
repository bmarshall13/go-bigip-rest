/* 
 * BigIP iControl REST
 *
 * REST API for F5 BigIP. Only LTM is included, and most endpoints are untested.
 *
 * OpenAPI spec version: 12.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package f5api

type Virtual struct {

	// Specifies the  virtual-address : port  on which the virtual server listens for connections.  virtual-address  can be an IP address or a previously created virtual-address.
	Destination string `json:"destination,omitempty"`

	// Specifies the netmask for a network virtual server only. This setting is required for a network virtual server. The netmask clarifies whether the host bit is an actual zero or a wildcard representation.
	Mask string `json:"mask,omitempty"`

	// Specifies the immediate action to take upon the receipt of the initial client's SYN packet if the availability status of the virtual server is Offline or Unavailable. This is supported for the virtual server of Standard type and TCP protocol. The default value is none.
	ServiceDownImmediateAction string `json:"serviceDownImmediateAction,omitempty"`

	// Note that when you disable a virtual server, the virtual server no longer accepts new connection requests. However, it allows current connections to finish processing before going to a down state.
	Disabled bool `json:"disabled,omitempty"`

	// Specifies whether the system preserves the source port of the connection. The default is preserve. Use of the preserve-strict setting should be restricted to UDP only under very special circumstances such as nPath or transparent (that is, no translation of any other L3/L4 field), where there is a 1:1 relationship between virtual IP addresses and node addresses, or when clustered multi-processing (CMP) is disabled. The change setting is useful for obfuscating internal network addresses.
	SourcePort string `json:"sourcePort,omitempty"`

	PerFlowRequestAccessPolicy string `json:"perFlowRequestAccessPolicy,omitempty"`

	// Specifies the maximum number of concurrent connections you want to allow for the virtual server.
	ConnectionLimit int64 `json:"connectionLimit,omitempty"`

	// Enables or disables state mirroring. You can use state mirroring to maintain the same state information in the standby unit that is in the active unit, allowing transactions such as FTP file transfers to continue as though uninterrupted. The default value is disabled.
	Mirror string `json:"mirror,omitempty"`

	// Specifies the name of the last hop pool that you want the virtual server to use to direct reply traffic to the last hop router.
	LastHopPool string `json:"lastHopPool,omitempty"`

	// Staged firewall policy.
	FwStagedPolicy string `json:"fwStagedPolicy,omitempty"`

	VsIndex int64 `json:"vsIndex,omitempty"`

	// Specifies the name of an existing SNAT pool that you want the virtual server to use to implement selective and intelligent SNATs. DEPRECATED - see Virtual Server Property Groups source-address-translation
	Snatpool string `json:"snatpool,omitempty"`

	// Disables the virtual server on the VLANs specified by the VLANs option.
	VlansDisabled bool `json:"vlansDisabled,omitempty"`

	// Specifies an IP address or network from which the virtual server will accept traffic.
	Source string `json:"source,omitempty"`

	// Specifies an internal virtual server that handles requests on the side for a parent virtual server, such as content adaptation.
	Internal bool `json:"internal,omitempty"`

	// Enforced firewall policy.
	FwEnforcedPolicy string `json:"fwEnforcedPolicy,omitempty"`

	// Enables or disables port translation. Turn port translation off for a virtual server if you want to use the virtual server to load balance connections to any service.
	TranslatePort string `json:"translatePort,omitempty"`

	// Specifies that the BIG-IP system rejects any traffic destined for the virtual server IP address.
	Reject bool `json:"reject,omitempty"`

	// Enable or disable SNAT automap for the virtual server. DEPRECATED - see Virtual Server Property Groups source-address-translation
	Snat string `json:"snat,omitempty"`

	// Specifies whether to automatically map last hop for pools or not. The default is to use next level's default.
	AutoLasthop string `json:"autoLasthop,omitempty"`

	// The application service to which the object belongs.
	AppService string `json:"appService,omitempty"`

	// Specifies the flow eviction policy for the virtual server to use when the connection limit is approached
	FlowEvictionPolicy string `json:"flowEvictionPolicy,omitempty"`

	// User defined description.
	Description string `json:"description,omitempty"`

	// Specifies a mask, in bits, to be applied to the destination address as part of the rate limiting.  The default value is '0', which is equivalent to using the entire address - '32' in IPv4, or '128' in IPv6.
	RateLimitDstMask int64 `json:"rateLimitDstMask,omitempty"`

	// Specifies whether this virtual does NAT64 translation
	Nat64 string `json:"nat64,omitempty"`

	// Indicates whether the rate limit is applied per virtual object, per source address, per destination address, or some combination thereof.  The default value is 'object', which does not use the source or destination address as part of the key.
	RateLimitMode string `json:"rateLimitMode,omitempty"`

	// Name of the Service Policy.
	ServicePolicy string `json:"servicePolicy,omitempty"`

	// Displays the SYN Cookies status which controlled by The Traffic Management Microkernel (TMM).
	SynCookieStatus string `json:"synCookieStatus,omitempty"`

	// Specifies a fallback persistence profile for the virtual server to use when the default persistence profile is not available.
	FallbackPersistence string `json:"fallbackPersistence,omitempty"`

	// Specifies a virtual server that relays all received DHCP requests to all pool members. If there is no pool, the received request get dropped.
	DhcpRelay bool `json:"dhcpRelay,omitempty"`

	// Specifies a score that is associated with the virtual server. Global Traffic Manager (GTM) can rely on this value to load balance traffic in a proportional manner.
	GtmScore int64 `json:"gtmScore,omitempty"`

	// Specifies the IP protocol for which you want the virtual server to direct traffic. Sample protocol names are tcp and udp.
	IpProtocol string `json:"ipProtocol,omitempty"`

	// Specifies whether the virtual will contribute to the operational status of the associated virtual-address. The default is 'yes'.
	AddressStatus string `json:"addressStatus,omitempty"`

	// Specifies a default pool to which you want the virtual server to automatically direct traffic.
	Pool string `json:"pool,omitempty"`

	// Specifies the name of an existing rate class for the virtual server to use to enforce a throughput policy for incoming network traffic.
	RateClass string `json:"rateClass,omitempty"`

	// The virtual server load balances each packet to a pool member, but no connection state is maintained.
	Stateless bool `json:"stateless,omitempty"`

	// Kind of entity
	Kind string `json:"kind,omitempty"`

	// Name of entity
	Name string `json:"name,omitempty"`

	// Specifies the name of an existing bwc policy for the virtual server to use to enforce a throughput policy for incoming network traffic.
	BwcPolicy string `json:"bwcPolicy,omitempty"`

	// Specifies the name of the URLDB feed policy that is attached.
	UrldbFeedPolicy string `json:"urldbFeedPolicy,omitempty"`

	// Enables or disables address translation for the virtual server. Turn address translation off for a virtual server if you want to use the virtual server to load balance connections to any address. This option is useful when the system is load balancing devices that have the same IP address.
	TranslateAddress string `json:"translateAddress,omitempty"`

	// Displays the administrative partition within which this profile resides.
	Partition string `json:"partition,omitempty"`

	// Specifies the state of the virtual server. The default value is enabled. This brings the virtual server to a state where it will accept new connections.
	Enabled bool `json:"enabled,omitempty"`

	// Enables or disables clustered multi-processor (CMP) acceleration. This feature applies to certain platforms only. The default value is enabled.
	CmpEnabled string `json:"cmpEnabled,omitempty"`

	// Enables the virtual server on the VLANs specified by the VLANs option.
	VlansEnabled bool `json:"vlansEnabled,omitempty"`

	// Specifies the maximum number of connections per second allowed for a virtual server. The default value is 'disabled'.
	RateLimit string `json:"rateLimit,omitempty"`

	// Specifies a virtual server like other virtual servers, except that the virtual server has no pool members to load balance. The virtual server simply forwards the packet directly to the destination IP address specified in the client request. Internal virtual servers do not receive external connections, instead they are specified by name by profiles in the parent virtual server (see ltm profile request-adapt and ltm profile response-adapt). Since internal virtual servers do not listen for external connections, not all attributes are used for internal virtual servers. The destination, mask, translate-address, translate-port, vlans, vlans-disabled and vlans-enabled attributes are set by the system, any attempt to change them will have no effect.
	IpForward bool `json:"ipForward,omitempty"`

	MobileAppTunnel string `json:"mobileAppTunnel,omitempty"`

	// Specifies a virtual server that shares the same IP address as a node in an associated VLAN. This is the type of virtual server you create when you want to create a VLAN group.
	L2Forward bool `json:"l2Forward,omitempty"`

	// Specifies a mask, in bits, to be applied to the source address as part of the rate limiting.  The default value is '0', which is equivalent to using the entire address - '32' in IPv4, or '128' in IPv6.
	RateLimitSrcMask int64 `json:"rateLimitSrcMask,omitempty"`

	// Name of the IP Intelligence (Dynamic White/Black List) policy that is attached.
	IpIntelligencePolicy string `json:"ipIntelligencePolicy,omitempty"`
}
