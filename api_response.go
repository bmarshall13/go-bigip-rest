/*
 * BigIP iControl REST
 *
 * REST API for F5 BigIP. List of operations is not complete, nor known to be accurate.
 *
 * OpenAPI spec version: 12.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package f5api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-resty/resty"
)

type ResponseNot200Error struct {
	msg      string
	ApiResp  interface{}
	HttpResp *http.Response
}

func (e ResponseNot200Error) Error() string {
	return e.msg
}

func ErrorIsNotFound(err error) bool {
	switch t := err.(type) {
	case ResponseNot200Error:
		if t.HttpResp.StatusCode == 404 {
			return true
		}
	}
	return false
}

func NewAPIResponse(r *resty.Response, err error) error {
	// FIXME: This is hard-coded to the current F5 API spec. Use the spec's
	// listed response types.
	if err == nil && r.StatusCode() != 200 {
		apiError := &ErrorModel{}
		err := json.Unmarshal(r.Body(), apiError)
		if err == nil {
			retError := ResponseNot200Error{
				msg:      fmt.Sprintf("Server returned error %d: %v", apiError.Code, apiError.Message),
				HttpResp: r.RawResponse,
				ApiResp:  apiError,
			}
			return error(retError)
		} else {
			retError := ResponseNot200Error{
				msg:      fmt.Sprintf("Server returned HTTP status: %v", r.Status()),
				HttpResp: r.RawResponse,
			}
			return error(retError)
		}
	}

	return err
}
